// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum OrderStatus {
  PENDING_CONFIRMATION
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  TWO_FA_SETUP
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

// Models
model Language {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdBy            User?                 @relation("LanguageCreatedBy", fields: [createdById], references: [id])
  updatedBy            User?                 @relation("LanguageUpdatedBy", fields: [updatedById], references: [id])
  userTranslations     UserTranslation[]
  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]
  brandTranslations    BrandTranslation[]
}

model User {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  name            String
  password        String?
  phoneNumber     String
  avatar          String?
  googleId        String?    @unique
  totpSecret      String?
  is2FAEnabled    Boolean    @default(false)
  emailVerifiedAt DateTime?
  status          UserStatus @default(ACTIVE)
  roleId          Int

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  role         Role   @relation(fields: [roleId], references: [id])
  createdBy    User?  @relation("UserCreatedBy", fields: [createdById], references: [id])
  updatedBy    User?  @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  createdUsers User[] @relation("UserCreatedBy")
  updatedUsers User[] @relation("UserUpdatedBy")

  userTranslations UserTranslation[]
  refreshTokens    RefreshToken[]
  devices          Device[] // added for device tracking
  sessions         UserSession[] // added for session management
  cartItems        CartItem[]
  orders           Order[]
  reviews          Review[]
  sentMessages     Message[]         @relation("MessageFrom")
  receivedMessages Message[]         @relation("MessageTo")

  // Created/Updated relations
  createdLanguages            Language[]            @relation("LanguageCreatedBy")
  updatedLanguages            Language[]            @relation("LanguageUpdatedBy")
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  createdRoles                Role[]                @relation("RoleCreatedBy")
  updatedRoles                Role[]                @relation("RoleUpdatedBy")
  createdProducts             Product[]             @relation("ProductCreatedBy")
  updatedProducts             Product[]             @relation("ProductUpdatedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  createdCategories           Category[]            @relation("CategoryCreatedBy")
  updatedCategories           Category[]            @relation("CategoryUpdatedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  createdVariants             Variant[]             @relation("VariantCreatedBy")
  updatedVariants             Variant[]             @relation("VariantUpdatedBy")
  createdVariantOptions       VariantOption[]       @relation("VariantOptionCreatedBy")
  updatedVariantOptions       VariantOption[]       @relation("VariantOptionUpdatedBy")
  createdSKUs                 SKU[]                 @relation("SKUCreatedBy")
  updatedSKUs                 SKU[]                 @relation("SKUUpdatedBy")
  createdBrands               Brand[]               @relation("BrandCreatedBy")
  updatedBrands               Brand[]               @relation("BrandUpdatedBy")
  createdBrandTranslations    BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  updatedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  createdOrders               Order[]               @relation("OrderCreatedBy")
  updatedOrders               Order[]               @relation("OrderUpdatedBy")
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  uploadedFiles               FileUpload[]          @relation("FileUploadedBy")
}

model UserTranslation {
  id          Int     @id @default(autoincrement())
  userId      Int
  languageId  Int
  address     String?
  description String?

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  language  Language @relation(fields: [languageId], references: [id])
  createdBy User?    @relation("UserTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy User?    @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id])
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String
  code  String
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email, code, type])
  @@index([expiresAt])
}

model RefreshToken {
  token  String @unique
  userId Int

  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([expiresAt])
}

model Device {
  id           Int      @id @default(autoincrement())
  userId       Int
  deviceId     String   @unique @db.VarChar(1000)
  deviceName   String
  deviceType   String
  browser      String?
  os           String?
  ip           String
  userAgent    String   @db.Text
  isActive     Boolean  @default(true)
  lastActiveAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id])
  sessions UserSession[]

  @@index([userId])
  @@index([deviceId])
  @@index([lastActiveAt])
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  deviceId     Int
  refreshToken String   @unique @db.VarChar(1000)
  accessToken  String?  @db.Text
  ip           String
  userAgent    String   @db.Text
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastUsedAt   DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  device Device @relation(fields: [deviceId], references: [id])

  @@index([userId])
  @@index([deviceId])
  @@index([refreshToken])
  @@index([expiresAt])
  @@index([lastUsedAt])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  path        String
  method      HTTPMethod

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdBy User?  @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  updatedBy User?  @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  roles     Role[] @relation("PermissionsRoles")
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  isActive    Boolean @default(true)

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdBy   User?        @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?        @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  users       User[]
  permissions Permission[] @relation("PermissionsRoles")
}

model Product {
  id            Int      @id @default(autoincrement())
  base_price    Float
  virtual_price Float
  brandId       Int
  images        String[]

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  brand               Brand                @relation(fields: [brandId], references: [id])
  createdBy           User?                @relation("ProductCreatedBy", fields: [createdById], references: [id])
  updatedBy           User?                @relation("ProductUpdatedBy", fields: [updatedById], references: [id])
  translations        ProductTranslation[]
  variants            Variant[]
  skus                SKU[]
  reviews             Review[]
  categories          Category[]           @relation("ProductsCategories")
  productSKUSnapshots ProductSKUSnapshot[]
}

model ProductTranslation {
  id          Int    @id @default(autoincrement())
  productId   Int
  languageId  Int
  name        String
  description String

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  product   Product  @relation(fields: [productId], references: [id])
  language  Language @relation(fields: [languageId], references: [id])
  createdBy User?    @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy User?    @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id])
}

model Category {
  id               Int  @id @default(autoincrement())
  parentCategoryId Int?

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  parentCategory  Category?             @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories Category[]            @relation("CategoryHierarchy")
  createdBy       User?                 @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?                 @relation("CategoryUpdatedBy", fields: [updatedById], references: [id])
  translations    CategoryTranslation[]
  products        Product[]             @relation("ProductsCategories")
}

model CategoryTranslation {
  id          Int    @id @default(autoincrement())
  categoryId  Int
  languageId  Int
  name        String
  description String

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  category  Category @relation(fields: [categoryId], references: [id])
  language  Language @relation(fields: [languageId], references: [id])
  createdBy User?    @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy User?    @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id])
}

model Variant {
  id        Int    @id @default(autoincrement())
  name      String
  productId Int

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  product   Product         @relation(fields: [productId], references: [id])
  createdBy User?           @relation("VariantCreatedBy", fields: [createdById], references: [id])
  updatedBy User?           @relation("VariantUpdatedBy", fields: [updatedById], references: [id])
  options   VariantOption[]
}

model VariantOption {
  id        Int    @id @default(autoincrement())
  value     String
  variantId Int

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  variant   Variant @relation(fields: [variantId], references: [id])
  createdBy User?   @relation("VariantOptionCreatedBy", fields: [createdById], references: [id])
  updatedBy User?   @relation("VariantOptionUpdatedBy", fields: [updatedById], references: [id])
  skus      SKU[]   @relation("SkusVariantOptions")
}

model SKU {
  id        Int      @id @default(autoincrement())
  value     String
  price     Float
  stock     Int
  images    String[]
  productId Int

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  product             Product              @relation(fields: [productId], references: [id])
  createdBy           User?                @relation("SKUCreatedBy", fields: [createdById], references: [id])
  updatedBy           User?                @relation("SKUUpdatedBy", fields: [updatedById], references: [id])
  variantOptions      VariantOption[]      @relation("SkusVariantOptions")
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]
}

model Brand {
  id   Int    @id @default(autoincrement())
  logo String

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  createdBy    User?              @relation("BrandCreatedBy", fields: [createdById], references: [id])
  updatedBy    User?              @relation("BrandUpdatedBy", fields: [updatedById], references: [id])
  products     Product[]
  translations BrandTranslation[]
}

model BrandTranslation {
  id          Int    @id @default(autoincrement())
  brandId     Int
  languageId  Int
  name        String
  description String

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  brand     Brand    @relation(fields: [brandId], references: [id])
  language  Language @relation(fields: [languageId], references: [id])
  createdBy User?    @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id])
  updatedBy User?    @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id])
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int
  skuId    Int
  userId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sku  SKU  @relation(fields: [skuId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model ProductSKUSnapshot {
  id          Int      @id @default(autoincrement())
  productName String
  price       Float
  images      String[]
  skuValue    String
  skuId       Int
  orderId     Int
  productId   Int

  createdAt DateTime @default(now())

  // Relations
  sku     SKU     @relation(fields: [skuId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id     Int         @id @default(autoincrement())
  userId Int
  status OrderStatus

  createdById Int?
  updatedById Int?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id])
  createdBy           User?                @relation("OrderCreatedBy", fields: [createdById], references: [id])
  updatedBy           User?                @relation("OrderUpdatedBy", fields: [updatedById], references: [id])
  productSKUSnapshots ProductSKUSnapshot[]
}

model Review {
  id        Int    @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  userId    Int

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String
  transactionDate    DateTime @default(now())
  accountNumber      String
  subAccount         String?
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?
  transactionContent String?
  referenceNumber    String?
  body               String?

  createdAt DateTime @default(now())
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  fromUser User @relation("MessageFrom", fields: [fromUserId], references: [id])
  toUser   User @relation("MessageTo", fields: [toUserId], references: [id])
}

model FileUpload {
  id           String  @id @default(uuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  category     String
  path         String
  url          String
  description  String?
  uploadedBy   Int
  thumbnail    String?

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  uploader User @relation("FileUploadedBy", fields: [uploadedBy], references: [id])

  @@index([uploadedBy])
  @@index([category])
  @@index([createdAt])
}
